security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Users\User:
            algorithm: auto
    
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users:
            entity:
                class: App\Entity\Users\User
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js|txt)/
            security: false
        main:
            lazy: false
            provider: users
            guard:
                authenticators: 
                    - App\Security\OAuthGoogleAuthenticator
                    - App\Security\OAuthYandexAuthenticator
            entry_point: App\Security\UserAuthenticator
            security: true
            form_login:
                # "login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
            # custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: main

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(%app.locales%)/ap, role: ROLE_ADMIN }
        - { path: ^/(%app.locales%)/review/, role: ROLE_USER }
        - { path: ^/ajax/comment/, role: ROLE_USER }
        - { path: ^/ajax/review/, role: ROLE_USER }

